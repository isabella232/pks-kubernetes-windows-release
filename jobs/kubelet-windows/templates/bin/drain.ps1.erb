trap { $host.SetShouldExit(1) }

$OutLog = "C:\var\vcap\sys\log\kubelet-windows\drain.stdout.log"
$ErrLog = "C:\var\vcap\sys\log\kubelet-windows\drain.stderr.log"


function main {
  if (kubelet_is_running) {
    if ! drain_kubelet ; then
      <% if_p("kubelet-drain-force-node") do |prop| %>
        <% if prop %>
          force_kill_pods
        <% else %>
          echo "Unsuccessful function drain_node"
          exit 1
        <% end %>
      <% end %>
    fi
    # watch_disks TODO(BM/LH): implement this?
    retry "delete_drained_node" $function:delete_drained_node
  }
  echo "0"
}

function drain_kubelet() {
  $nodes=(/var/vcap/packages/kubernetes-windows/bin/kubectl `
    --kubeconfig /var/vcap/jobs/kubelet-windows/config/kubeconfig-drain `
    get nodes -o json | ConvertFrom-Json).Items
  $node_name=($nodes | ? { $_.metadata.labels."bosh.id" -eq "<%= spec.id %>" }).metadata.name

  if (!$node_name) {
    return $true
  }

  kubectl_args=()
  kubectl_args+=(--kubeconfig /var/vcap/jobs/kubelet-windows/config/kubeconfig-drain drain)
  kubectl_args+=(-l "bosh.id=<%= spec.id %>")
  kubectl_args+=(--grace-period <%= p("kubelet-drain-grace-period") %>)
  kubectl_args+=(--timeout <%= p("kubectl-drain-timeout") %>)

  <% if_p("kubelet-drain-force") do |prop| %>
    <% if prop %>
      kubectl_args+=(--force)
    <% end %>
  <% end %>

  <% if_p("kubelet-drain-ignore-daemonsets") do |prop| %>
    <% if prop %>
      kubectl_args+=(--ignore-daemonsets)
    <% end %>
  <% end %>

  <% if_p("kubelet-drain-delete-local-data") do |prop| %>
    <% if prop %>
      kubectl_args+=(--delete-local-data)
    <% end %>
  <% end %>

  /var/vcap/packages/kubernetes-windows/bin/kubectl "${kubectl_args[@]}"

  return $?
}

force_kill_pods() {
  echo "Forcefully draining the node"
  node_name=$(/var/vcap/packages/kubernetes-windows/bin/kubectl --kubeconfig /var/vcap/jobs/kubelet-windows/config/kubeconfig-drain get node -l "bosh.id=<%= spec.id %>" -o jsonpath="{.items[:].metadata.name}")
  namespaces=( $(/var/vcap/packages/kubernetes-windows/bin/kubectl --kubeconfig /var/vcap/jobs/kubelet-windows/config/kubeconfig-drain get pods --all-namespaces --field-selector spec.nodeName=${node_name} -o jsonpath="{.items[:].metadata.namespace}" | xargs -n1 | sort -u -) )
  for namespace in "${namespaces[@]}"; do
    echo $namespace;
    podnames=( $(/var/vcap/packages/kubernetes-windows/bin/kubectl --kubeconfig /var/vcap/jobs/kubelet-windows/config/kubeconfig-drain get pods -n=${namespace} --field-selector spec.nodeName=${node_name} -o jsonpath="{.items[:].metadata.name}") )
    for pod_name in "${podnames[@]}"; do
      echo "Force Deleting pod ${pod_name}"
      /var/vcap/packages/kubernetes-windows/bin/kubectl --kubeconfig /var/vcap/jobs/kubelet-windows/config/kubeconfig-drain delete pods ${pod_name}  --namespace ${namespace} --grace-period=0 --force
    done
  done
}

function delete_drained_node() {
  $nodes=(/var/vcap/packages/kubernetes-windows/bin/kubectl `
    --kubeconfig /var/vcap/jobs/kubelet-windows/config/kubeconfig-drain `
    get nodes -o json | ConvertFrom-Json).Items
  $node_name=($nodes | ? { $_.metadata.labels."bosh.id" -eq "<%= spec.id %>" }).metadata.name

  if (!$node_name) {
    return $true
  }
  /var/vcap/packages/kubernetes-windows/bin/kubectl `
    --kubeconfig /var/vcap/jobs/kubelet-windows/config/kubeconfig-drain delete node "${node_name}" `
    --ignore-not-found | Out-Null
  return $?
}

function retry($name, $func) {
  $attempt_number=1
  $max_attempts=10

  do {
    $result=$func.Invoke()
    if ($result) {
      echo "Successfully $name" | Out-File -FilePath $OutLog -encoding ascii
      return
    }
    echo ("[{0}] Unsuccessful {1}, retrying attempt {2} out of {3}" -f (Get-Date -UFormat %s), $name, $attempt_number, $max_attempts) | Out-File -FilePath $OutLog -encoding ascii
    $attempt_number=$attempt_number + 1
    sleep 1
  } while ($attempt_number -le $max_attempts)

  throw "Failed all retry attempts for $name"
}

function kubelet_is_running() {
  curl.exe --silent --fail http://localhost:10248/healthz
  return $?
}

main
