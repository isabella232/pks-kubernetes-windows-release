$ErrorActionPreference = "Stop";
trap { $host.SetShouldExit(1) }

$mtx = New-Object System.Threading.Mutex($false, "PathMutex")

if (!$mtx.WaitOne(300000)) {
  throw "Could not acquire PATH mutex"
}

$AddedFolder= "C:\var\vcap\packages\docker-windows\docker\"

$OldPath=(Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH).Path

if (-not $OldPath.Contains($AddedFolder)) {
  $NewPath=$OldPath+';'+$AddedFolder
  Set-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH -Value $newPath
}

$mtx.ReleaseMutex()

# Set env setting for proxy, akin to:
# Proxy configuration

<% if_link('docker') do |docker| %>
<% docker.if_p('env.http_proxy') do |http_proxy| %>
[System.Environment]::SetEnvironmentVariable("HTTP_PROXY", "<%= http_proxy %>", "User")
<% end %>
<% docker.if_p('env.https_proxy') do |https_proxy| %>
[System.Environment]::SetEnvironmentVariable("HTTPS_PROXY", "<%= https_proxy %>", "User")
<% end %>
<% docker.if_p('env.no_proxy') do |no_proxy| %>
[System.Environment]::SetEnvironmentVariable("NO_PROXY", "<%= no_proxy %>", "User")
<% end %>
<% end %>

C:\var\vcap\packages\docker-windows\docker\dockerd --register-service

Start-Service Docker
