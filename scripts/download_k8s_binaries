#!/usr/bin/env bash
set -ex

binaries=(
  "kube-proxy.exe"
  "kubectl.exe"
  "kubelet.exe"
)

main() {
  local staging_dir kubernetes_version

  if [ $# -ne 1 ]; then
    echo "Usage: $(basename "$0") [KUBERNETES VERSION]"
    exit  1
  fi

  kubernetes_version=$1
  staging_dir=$(mktemp -d)

  trap '{ rm -rf "$staging_dir"; }' EXIT

  pushd "$(dirname "${BASH_SOURCE[0]}")/.." || exit 1

  existing_k8s_spec=$(bosh blobs --column path | grep "${binaries[0]}" | grep -o -E "kubernetes-windows-([0-9]+\.)+[0-9]+")
  existing_k8s_version=$(echo "$existing_k8s_spec" | grep -o -E '([0-9]+\.)+[0-9]+')

  if [ "$existing_k8s_version" == "$kubernetes_version" ]; then
      echo "Kubernetes version already up-to-date."
  else
    pushd "packages/kubernetes-windows"
      sed -E -i -e "s/KUBERNETES_VERSION=\"([0-9]+\.)+[0-9]+\"/KUBERNETES_VERSION=\"${kubernetes_version}\"/" packaging
      sed -E -i -e "s/${existing_k8s_spec}/kubernetes-windows-${kubernetes_version}/" spec
    popd

    for binary in "${binaries[@]}"; do
      download "${binary}" "${staging_dir}" "${kubernetes_version}" "windows"
      add_blob "${binary}" "${staging_dir}" "${kubernetes_version}" "kubernetes-windows"
    done
  fi

  popd || exit 1
}

download() {
  local binary_name staging_dir kubernetes_version platform
  binary_name="$1"
  staging_dir="$2"
  kubernetes_version="$3"
  platform="$4"

  wget -O "${staging_dir}/${binary_name}" "https://storage.googleapis.com/kubernetes-release/release/v${kubernetes_version}/bin/${platform}/amd64/${binary_name}"
}

add_blob() {
  local binary_name blob_name staging_dir kubernetes_version package_name
  binary_name="$1"
  staging_dir="$2"
  kubernetes_version="$3"
  package_name="$4"
  blob_name=$(bosh blobs --column path | grep "${binary_name}\s$" | xargs)

  bosh remove-blob "$blob_name"
  bosh add-blob "${staging_dir}/${binary_name}" "${package_name}-${kubernetes_version}/$binary_name"
}

main "$@"
